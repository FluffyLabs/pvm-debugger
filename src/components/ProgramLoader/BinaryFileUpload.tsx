import { Input } from "../ui/input";
import { ProgramUploadFileOutput } from "./types";
import { decodeStandardProgram } from "@typeberry/pvm-debugger-adapter";

export const BinaryFileUpload = ({
  onFileUpload,
  close,
}: {
  onFileUpload: (val: ProgramUploadFileOutput) => void;
  close?: () => void;
}) => {
  let fileReader: FileReader;

  const handleFileRead = (e) => {
    const arrayBuffer = e.target.result; // This is the ArrayBuffer
    const uint8Array = new Uint8Array(arrayBuffer);
    const { code, memory, registers } = decodeStandardProgram(uint8Array, new Uint8Array());

    console.log({
      code,
      memory,
      registers,
    });

    onFileUpload({
      program: Array.from(code),
      name: "custom",
      initial: {
        regs: [...registers],
        pc: 0,
        pageMap: [],
        // memory: [...memory],
        gas: 10000,
      },
    });

    /* try {
      if (fileContent !== null && typeof fileContent === "string") {
        console.log({
          fileContent,
        });

        // const parsedBlob = bytes.BytesBlob.parseBlob(fileContent);

        // const jsonFile = JSON.parse(fileContent);
        //
        //
        // const program = new Uint8Array([
        //   0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10, 0x1, 0x0, 0x0, 0xf9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0xd9, 0x5, 0x12, 0x0,
        //   0x0, 0x0, 0x5, 0x11, 0x0, 0x0, 0x0, 0x5, 0xa3, 0x0, 0x0, 0x0, 0x5, 0xc6, 0x0, 0x4, 0x7, 0x13, 0x0, 0x2, 0x11, 0xa4,
        //   0x3, 0x10, 0x58, 0x3, 0x15, 0x54, 0x3, 0x16, 0x50, 0xd, 0x11, 0x1c, 0xd, 0x11, 0x18, 0xd, 0x11, 0x14, 0xd, 0x11, 0x10,
        //   0xd, 0x11, 0xc, 0xd, 0x11, 0x8, 0xd, 0x11, 0x4, 0xd, 0x1, 0xd, 0x11, 0x3c, 0xd, 0x11, 0x38, 0xd, 0x11, 0x34, 0xd,
        //   0x11, 0x30, 0xd, 0x11, 0x2c, 0xd, 0x11, 0x28, 0xd, 0x11, 0x24, 0xd, 0x11, 0x20, 0xd, 0x11, 0x40, 0x52, 0x18, 0x4, 0x9,
        //   0x20, 0x2, 0x1a, 0x40, 0x4, 0xb, 0x4, 0x4, 0x7, 0x4e, 0x2, 0x1, 0x15, 0x40, 0xd, 0x11, 0x44, 0x2, 0x18, 0x20, 0x4,
        //   0x9, 0x20, 0x2, 0x1a, 0x44, 0x4, 0xb, 0x4, 0x4, 0x7, 0x4e, 0x2, 0x1, 0x16, 0x44, 0x3, 0x15, 0x48, 0x52, 0x17, 0x4,
        //   0x8, 0x20, 0x2, 0x19, 0x48, 0x4, 0xa, 0x4, 0x4e, 0x3, 0x3, 0x16, 0x4c, 0x2, 0x17, 0x20, 0x4, 0x8, 0x20, 0x2, 0x19,
        //   0x4c, 0x4, 0xa, 0x4, 0x4e, 0x3, 0x4, 0x7, 0x1, 0x10, 0x58, 0x1, 0x15, 0x54, 0x1, 0x16, 0x50, 0x2, 0x11, 0x5c, 0x13,
        //   0x0, 0x2, 0x11, 0xec, 0x3, 0x10, 0x10, 0xd, 0x11, 0x8, 0xd, 0x11, 0x4, 0xd, 0x1, 0x1a, 0x11, 0xf, 0x2, 0x17, 0xf, 0x4,
        //   0x8, 0x1, 0x52, 0x19, 0x4, 0xa, 0xc, 0x4e, 0x3, 0x4, 0x7, 0x1, 0x10, 0x10, 0x2, 0x11, 0x14, 0x13, 0x0, 0x4, 0x7, 0x13,
        //   0x0, 0x21, 0x84, 0x54, 0x92, 0x24, 0x49, 0x92, 0x92, 0x24, 0x49, 0x52, 0x92, 0x4a, 0x92, 0xa4, 0x92, 0x92, 0x94, 0x24,
        //   0xa9, 0x24, 0x29, 0x49, 0x4a, 0x52, 0x2a, 0xa9, 0x0,
        // ]);

        // const program = new Uint8Array(fileContent.split(',').map((x) => parseInt(x, 10)));


        try {

          const program = hexStringToUint8Array(fileContent);
          console.log('pppp', program)
          const { code, memory, registers } = decodeStandardProgram(program, new Uint8Array());



          onFileUpload({
            program: Array.from(code),
            name: "custom",
            initial: {
              regs: [...registers],
              pc: 0,
              pageMap: [],
              // memory: [...memory],
              gas: 10000,
            },
          });
          // console.log('pppp2', x)
        } catch (e) {
          console.log('pppp3', e)
        }

        // console.log('pppp2', {
        //   code,
        //   memory,
        //   registers,
        // })
      } else {
        alert("Cannot read file");
      }
    } catch (e) {
      alert("Cannot parse JSON");
    }*/
  };

  const handleProgramUpload = (file: Blob) => {
    fileReader = new FileReader();
    fileReader.onload = handleFileRead;
    fileReader.readAsArrayBuffer(file);
  };

  return (
    <div className="block">
      <p className="mt-10 mb-3">or upload program as a binary file</p>
      <Input
        className="mt-3 mr-3"
        id="test-file"
        type="file"
        // accept="application/json"
        onClick={(e) => e.stopPropagation()}
        onChange={(e) => {
          if (e.target.files?.length) {
            handleProgramUpload(e.target.files[0]);
            close?.();
          }
        }}
      />
    </div>
  );
};
