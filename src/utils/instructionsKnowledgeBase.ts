export interface InstructionKnowledgeBaseEntry {
  name: string;
  opcode?: string | number;
  description?: string;
  latex?: string;
  linkInGrayPaperReader?: string;
}

export const instructionsKnowledgeBase: InstructionKnowledgeBaseEntry[] = [
  {
    name: "trap",
    opcode: 0,
    description: "Trigger a trap, setting the error state.",
    latex: "\\varepsilon = \\text{â˜‡}",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/251c00251c00",
  },
  {
    name: "fallthrough",
    opcode: 1,
    description: "Proceed with the next instruction without any modifications.",
    latex: "",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/251c00251c00",
  },

  {
    name: "ecalli",
    opcode: 10,
    description: "Perform a host environment call using an immediate value.",
    latex: "\\varepsilon = \\text{h} \\times \\nu_X",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/256900256900",
  },

  {
    name: "load_imm_64",
    opcode: 20,
    description: "Load a 64-bit immediate value into a register.",
    latex: "\\omega'_A = \\nu_X",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/25c60025c600",
  },

  {
    name: "store_imm_u8",
    opcode: 30,
    description: "Store an 8-bit immediate value to memory.",
    latex: "\\mu'\\nu_X = \\nu_Y \\mod 2^8",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/252301252301",
  },
  {
    name: "store_imm_u16",
    opcode: 31,
    description: "Store a 16-bit immediate value to memory.",
    latex: "\\mu'\\nu_X+2 = \\mathcal{E}_2(\\nu_Y \\mod 2^{16})",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/252301252301",
  },
  {
    name: "store_imm_u32",
    opcode: 32,
    description: "Store a 32-bit immediate value to memory.",
    latex: "\\mu'\\nu_X+4 = \\mathcal{E}_4(\\nu_Y \\mod 2^{32})",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/252301252301",
  },
  {
    name: "store_imm_u64",
    opcode: 33,
    description: "Store a 64-bit immediate value to memory.",
    latex: "\\mu'\\nu_X+8 = \\mathcal{E}_8(\\nu_Y)",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/252301252301",
  },

  {
    name: "jump",
    opcode: 40,
    description: "Unconditionally jump to a computed address.",
    latex: "\\text{branch}(\\nu_X, \\top)",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/250602250602",
  },

  {
    name: "jump_ind",
    opcode: 50,
    description: "Dynamically jump to an address computed from a register and offset.",
    latex: "\\text{djump}((\\omega_A + \\nu_X) \\mod 2^{32})",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/256202256202",
  },
  {
    name: "load_imm",
    opcode: 51,
    description: "Load an immediate value into a register.",
    latex: "\\omega'_A = \\nu_X",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/256202256202",
  },
  {
    name: "load_u8",
    opcode: 52,
    description: "Load an 8-bit value from memory into a register.",
    latex: "\\omega'_A = \\mu_X",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/256202256202",
  },
  {
    name: "load_i8",
    opcode: 53,
    description: "Load an 8-bit signed value from memory into a register.",
    latex: "\\omega'_A = \\mathcal{H}_1(\\mu_X)",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/256202256202",
  },
  {
    name: "load_u16",
    opcode: 54,
    description: "Load a 16-bit unsigned value from memory into a register.",
    latex: "\\omega'_A = \\mathcal{E}_2^{-1}(\\mu_{X+2})",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/256202256202",
  },
  {
    name: "load_i16",
    opcode: 55,
    description: "Load a 16-bit signed value from memory into a register.",
    latex: "\\omega'_A = \\mathcal{K}_2(\\mathcal{E}_2^{-1}(\\mu_{X+2}))",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/256202256202",
  },
  {
    name: "load_u32",
    opcode: 56,
    description: "Load a 32-bit unsigned value from memory into a register.",
    latex: "\\omega'_A = \\mathcal{E}_4^{-1}(\\mu_{X+4})",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/256202256202",
  },
  {
    name: "load_i32",
    opcode: 57,
    description: "Load a 32-bit signed value from memory into a register.",
    latex: "\\omega'_A = \\mathcal{K}_4(\\mathcal{E}_4^{-1}(\\mu_{X+4}))",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/256202256202",
  },
  {
    name: "load_u64",
    opcode: 58,
    description: "Load a 64-bit unsigned value from memory into a register.",
    latex: "\\omega'_A = \\mathcal{E}_8^{-1}(\\mu_{X+8})",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/256202256202",
  },
  {
    name: "store_u8",
    opcode: 59,
    description: "Store an 8-bit value from a register into memory.",
    latex: "\\mu'\\nu_X = \\omega_A \\mod 2^8",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/256202256202",
  },
  {
    name: "store_u16",
    opcode: 60,
    description: "Store a 16-bit value from a register into memory.",
    latex: "\\mu'\\nu_X+2 = \\mathcal{E}_2(\\omega_A \\mod 2^{16})",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/256202256202",
  },
  {
    name: "store_u32",
    opcode: 61,
    description: "Store a 32-bit value from a register into memory.",
    latex: "\\mu'\\nu_X+4 = \\mathcal{E}_4(\\omega_A \\mod 2^{32})",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/256202256202",
  },
  {
    name: "store_u64",
    opcode: 62,
    description: "Store a 64-bit value from a register into memory.",
    latex: "\\mu'\\nu_X+8 = \\mathcal{E}_8(\\omega_A)",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/256202256202",
  },

  {
    name: "store_imm_ind_u8",
    opcode: 70,
    description: "Store an 8-bit immediate value indirectly into memory.",
    latex: "\\mu'\\omega_A+\\nu_X = \\nu_Y \\mod 2^8",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/262e01262e01",
  },
  {
    name: "store_imm_ind_u16",
    opcode: 71,
    description: "Store a 16-bit immediate value indirectly into memory.",
    latex: "\\mu'\\omega_A+\\nu_X+2 = \\mathcal{E}_2(\\nu_Y \\mod 2^{16})",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/262e01262e01",
  },
  {
    name: "store_imm_ind_u32",
    opcode: 72,
    description: "Store a 32-bit immediate value indirectly into memory.",
    latex: "\\mu'\\omega_A+\\nu_X+4 = \\mathcal{E}_4(\\nu_Y \\mod 2^{32})",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/262e01262e01",
  },
  {
    name: "store_imm_ind_u64",
    opcode: 73,
    description: "Store a 64-bit immediate value indirectly into memory.",
    latex: "\\mu'\\omega_A+\\nu_X+8 = \\mathcal{E}_8(\\nu_Y)",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/262e01262e01",
  },

  {
    name: "load_imm_jump",
    opcode: 80,
    description: "Load an immediate jump address and branch to it.",
    latex: "\\text{branch}(\\nu_Y, \\top), \\omega'_A = \\nu_X",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/263e02263e02",
  },
  {
    name: "branch_eq_imm",
    opcode: 81,
    description: "Branch if the register equals an immediate value.",
    latex: "\\text{branch}(\\nu_Y, \\omega_A = \\nu_X)",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/263e02263e02",
  },
  {
    name: "branch_ne_imm",
    opcode: 82,
    description: "Branch if the register is not equal to an immediate value.",
    latex: "\\text{branch}(\\nu_Y, \\omega_A \\neq \\nu_X)",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/263e02263e02",
  },
  {
    name: "branch_lt_u_imm",
    opcode: 83,
    description: "Branch if the register is less than an immediate value (unsigned).",
    latex: "\\text{branch}(\\nu_Y, \\omega_A < \\nu_X)",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/263e02263e02",
  },
  {
    name: "branch_le_u_imm",
    opcode: 84,
    description: "Branch if the register is less than or equal to an immediate value (unsigned).",
    latex: "\\text{branch}(\\nu_Y, \\omega_A \\leq \\nu_X)",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/263e02263e02",
  },
  {
    name: "branch_ge_u_imm",
    opcode: 85,
    description: "Branch if the register is greater than or equal to an immediate value (unsigned).",
    latex: "\\text{branch}(\\nu_Y, \\omega_A \\geq \\nu_X)",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/263e02263e02",
  },
  {
    name: "branch_gt_u_imm",
    opcode: 86,
    description: "Branch if the register is greater than an immediate value (unsigned).",
    latex: "\\text{branch}(\\nu_Y, \\omega_A > \\nu_X)",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/263e02263e02",
  },
  {
    name: "branch_lt_s_imm",
    opcode: 87,
    description: "Branch if the register is less than an immediate value (signed).",
    latex: "\\text{branch}(\\nu_Y, Z_8(\\omega_A) < Z_8(\\nu_X))",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/263e02263e02",
  },
  {
    name: "branch_le_s_imm",
    opcode: 88,
    description: "Branch if the register is less than or equal to an immediate value (signed).",
    latex: "\\text{branch}(\\nu_Y, Z_8(\\omega_A) \\leq Z_8(\\nu_X))",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/263e02263e02",
  },
  {
    name: "branch_ge_s_imm",
    opcode: 89,
    description: "Branch if the register is greater than or equal to an immediate value (signed).",
    latex: "\\text{branch}(\\nu_Y, Z_8(\\omega_A) \\geq Z_8(\\nu_X))",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/263e02263e02",
  },
  {
    name: "branch_gt_s_imm",
    opcode: 90,
    description: "Branch if the register is greater than an immediate value (signed).",
    latex: "\\text{branch}(\\nu_Y, Z_8(\\omega_A) > Z_8(\\nu_X))",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/263e02263e02",
  },

  {
    name: "move_reg",
    opcode: 100,
    description: "Move the value of one register into another.",
    latex: "\\omega'_D = \\omega_A",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/271100271100",
  },
  {
    name: "sbrk",
    opcode: 101,
    description: "Advance the program break (heap) to allocate memory.",
    latex:
      "\\omega'_D = \\min(x \\in \\mathbb{N}_R : x \\geq h \\land \\mathbb{N}_{\\omega_R \\nearrow} \\notin \\mathbb{V}_h \\land \\mathbb{N}_{\\omega_R \\nearrow} \\subseteq \\mathbb{V}_{\\mu})",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/271100271100",
  },
  {
    name: "count_set_bits_64",
    opcode: 102,
    description: "Count the number of set bits in a 64-bit register.",
    latex: "\\omega'_D = \\sum_{i=0}^{63} B_8(\\omega_A)_i",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/271100271100",
  },
  {
    name: "count_set_bits_32",
    opcode: 103,
    description: "Count the number of set bits in a 32-bit register.",
    latex: "\\omega'_D = \\sum_{i=0}^{31} B_4(\\omega_A \\mod 2^{32})_i",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/271100271100",
  },
  {
    name: "leading_zero_bits_64",
    opcode: 104,
    description: "Count the leading zero bits in a 64-bit register.",
    latex: "\\omega'_D = \\max(n \\in \\mathbb{N}_{65}) \\text{ where } \\sum_{i=0}^{n} B_8(\\omega_A)_i = 0",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/271100271100",
  },
  {
    name: "leading_zero_bits_32",
    opcode: 105,
    description: "Count the leading zero bits in a 32-bit register.",
    latex:
      "\\omega'_D = \\max(n \\in \\mathbb{N}_{33}) \\text{ where } \\sum_{i=0}^{n} B_4(\\omega_A \\mod 2^{32})_i = 0",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/271100271100",
  },
  {
    name: "trailing_zero_bits_64",
    opcode: 106,
    description: "Count the trailing zero bits in a 64-bit register.",
    latex: "\\omega'_D = \\max(n \\in \\mathbb{N}_{65}) \\text{ where } \\sum_{i=0}^{n} B_8(\\omega_A)_{63-i} = 0",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/271100271100",
  },
  {
    name: "trailing_zero_bits_32",
    opcode: 107,
    description: "Count the trailing zero bits in a 32-bit register.",
    latex:
      "\\omega'_D = \\max(n \\in \\mathbb{N}_{33}) \\text{ where } \\sum_{i=0}^{n} B_4(\\omega_A \\mod 2^{32})_{31-i} = 0",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/271100271100",
  },
  {
    name: "sign_extend_8",
    opcode: 108,
    description: "Sign-extend an 8-bit value in a register.",
    latex: "\\omega'_D = Z_8^{-1}(Z_1(\\omega_A \\mod 2^8))",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/271100271100",
  },
  {
    name: "sign_extend_16",
    opcode: 109,
    description: "Sign-extend a 16-bit value in a register.",
    latex: "\\omega'_D = Z_8^{-1}(Z_2(\\omega_A \\mod 2^{16}))",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/271100271100",
  },
  {
    name: "zero_extend_16",
    opcode: 110,
    description: "Zero-extend a 16-bit value in a register.",
    latex: "\\omega'_D = \\omega_A \\mod 2^{16}",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/271100271100",
  },
  {
    name: "reverse_bytes",
    opcode: 111,
    description: "Reverse the bytes in a register.",
    latex: "\\forall i \\in \\mathbb{N}_8 : \\mathcal{E}_8(\\omega'_D)_i = \\mathcal{E}_8(\\omega_A)_{7-i}",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/271100271100",
  },

  {
    name: "store_ind_u8",
    opcode: 120,
    description: "Store an 8-bit value indirectly into memory.",
    latex: "\\mu'{\\omega_B+\\nu_X} = \\omega_A \\mod 2^8",
    linkInGrayPaperReader: "A.5.10. Instructions with Arguments of Two Registers & One Immediate.",
  },
  {
    name: "store_ind_u16",
    opcode: 121,
    description: "Store a 16-bit value indirectly into memory.",
    latex: "\\mu'{\\omega_B+\\nu_X+2} = \\mathcal{E}_2(\\omega_A \\mod 2^{16})",
    linkInGrayPaperReader: "A.5.10. Instructions with Arguments of Two Registers & One Immediate.",
  },
  {
    name: "store_ind_u32",
    opcode: 122,
    description: "Store a 32-bit value indirectly into memory.",
    latex: "\\mu'{\\omega_B+\\nu_X+4} = \\mathcal{E}_4(\\omega_A \\mod 2^{32})",
    linkInGrayPaperReader: "A.5.10. Instructions with Arguments of Two Registers & One Immediate.",
  },
  {
    name: "store_ind_u64",
    opcode: 123,
    description: "Store a 64-bit value indirectly into memory.",
    latex: "\\mu'{\\omega_B+\\nu_X+8} = \\mathcal{E}_8(\\omega_A)",
    linkInGrayPaperReader: "A.5.10. Instructions with Arguments of Two Registers & One Immediate.",
  },
  {
    name: "load_ind_u8",
    opcode: 124,
    description: "Load an 8-bit value indirectly from memory.",
    latex: "\\omega'_A = \\mu_{\\omega_B+\\nu_X}",
    linkInGrayPaperReader: "A.5.10. Instructions with Arguments of Two Registers & One Immediate.",
  },
  {
    name: "load_ind_i8",
    opcode: 125,
    description: "Load an 8-bit signed value indirectly from memory.",
    latex: "\\omega'_A = Z_8(\\mathcal{Z}_1(\\mu_{\\omega_B+\\nu_X}))",
    linkInGrayPaperReader: "A.5.10. Instructions with Arguments of Two Registers & One Immediate.",
  },
  {
    name: "load_ind_u16",
    opcode: 126,
    description: "Load a 16-bit unsigned value indirectly from memory.",
    latex: "\\omega'_A = \\mathcal{E}_2^{-1}(\\mu_{\\omega_B+\\nu_X+2})",
    linkInGrayPaperReader: "A.5.10. Instructions with Arguments of Two Registers & One Immediate.",
  },
  {
    name: "load_ind_i16",
    opcode: 127,
    description: "Load a 16-bit signed value indirectly from memory.",
    latex: "\\omega'_A = Z_8(\\mathcal{Z}_2(\\mathcal{E}_2^{-1}(\\mu_{\\omega_B+\\nu_X})))",
    linkInGrayPaperReader: "A.5.10. Instructions with Arguments of Two Registers & One Immediate.",
  },
  {
    name: "load_ind_u32",
    opcode: 128,
    description: "Load a 32-bit unsigned value indirectly from memory.",
    latex: "\\omega'_A = \\mathcal{E}_4^{-1}(\\mu_{\\omega_B+\\nu_X+4})",
    linkInGrayPaperReader: "A.5.10. Instructions with Arguments of Two Registers & One Immediate.",
  },
  {
    name: "load_ind_i32",
    opcode: 129,
    description: "Load a 32-bit signed value indirectly from memory.",
    latex: "\\omega'_A = Z_8(\\mathcal{Z}_4(\\mathcal{E}_4^{-1}(\\mu_{\\omega_B+\\nu_X})))",
    linkInGrayPaperReader: "A.5.10. Instructions with Arguments of Two Registers & One Immediate.",
  },
  {
    name: "load_ind_u64",
    opcode: 130,
    description: "Load a 64-bit unsigned value indirectly from memory.",
    latex: "\\omega'_A = \\mathcal{E}_8^{-1}(\\mu_{\\omega_B+\\nu_X+8})",
    linkInGrayPaperReader: "A.5.10. Instructions with Arguments of Two Registers & One Immediate.",
  },
  {
    name: "add_imm_32",
    opcode: 131,
    description: "Add an immediate value to a register.",
    latex: "\\omega'_A = \\mathcal{X}_4((\\omega_B + \\nu_X) \\mod 2^{32})",
    linkInGrayPaperReader: "A.5.10. Instructions with Arguments of Two Registers & One Immediate.",
  },
  {
    name: "and_imm",
    opcode: 132,
    description: "Bitwise AND a register value with an immediate.",
    latex: "\\forall i \\in \\mathbb{N}_4 : B_8(\\omega'_A) = B_8(\\omega_B) \\land B_8(\\nu_X)",
    linkInGrayPaperReader: "A.5.10. Instructions with Arguments of Two Registers & One Immediate.",
  },
  {
    name: "xor_imm",
    opcode: 133,
    description: "Bitwise XOR a register value with an immediate.",
    latex: "\\forall i \\in \\mathbb{N}_4 : B_8(\\omega'_A) = B_8(\\omega_B) \\oplus B_8(\\nu_X)",
    linkInGrayPaperReader: "A.5.10. Instructions with Arguments of Two Registers & One Immediate.",
  },
  {
    name: "or_imm",
    opcode: 134,
    description: "Bitwise OR a register value with an immediate.",
    latex: "\\forall i \\in \\mathbb{N}_4 : B_8(\\omega'_A) = B_8(\\omega_B) \\lor B_8(\\nu_X)",
    linkInGrayPaperReader: "A.5.10. Instructions with Arguments of Two Registers & One Immediate.",
  },
  {
    name: "mul_imm_32",
    opcode: 135,
    description: "Multiply a register value with an immediate value (32-bit).",
    latex: "\\omega'_A = \\mathcal{X}_4((\\omega_B \\times \\nu_X) \\mod 2^{32})",
    linkInGrayPaperReader: "A.5.10. Instructions with Arguments of Two Registers & One Immediate.",
  },
  {
    name: "set_lt_u_imm",
    opcode: 136,
    description: "Set if less than (unsigned comparison) with immediate.",
    latex: "\\omega'_A = \\omega_B < \\nu_X",
    linkInGrayPaperReader: "A.5.10. Instructions with Arguments of Two Registers & One Immediate.",
  },
  {
    name: "set_lt_s_imm",
    opcode: 137,
    description: "Set if less than (signed comparison) with immediate.",
    latex: "\\omega'_A = \\omega_B < \\nu_X",
    linkInGrayPaperReader: "A.5.10. Instructions with Arguments of Two Registers & One Immediate.",
  },
  {
    name: "shlo_imm_32",
    opcode: 138,
    description: "Shift left logical by immediate (32-bit).",
    latex: "\\omega'_A = \\mathcal{X}_4((\\omega_B \\cdot 2^{\\nu_X} \\mod 2^{32}) \\mod 2^{32})",
    linkInGrayPaperReader: "A.5.10. Instructions with Arguments of Two Registers & One Immediate.",
  },
  {
    name: "shlo_imm_alt_32",
    opcode: 135,
    description: "Alternative shift left logical by immediate (32-bit).",
    latex: "\\omega'_A = \\mathcal{X}_4((\\omega_B \\cdot 2^{\\nu_X} \\mod 2^{32}) \\mod 2^{32})",
    linkInGrayPaperReader: "A.5.10. Instructions with Arguments of Two Registers & One Immediate.",
  },
  {
    name: "shar_imm_32",
    opcode: 136,
    description: "Arithmetic shift right by immediate (32-bit).",
    latex: "\\omega'_A = Z_8(\\lfloor Z_4(\\omega_B) \\div 2^{\\nu_X} \\rfloor)",
    linkInGrayPaperReader: "A.5.10. Instructions with Arguments of Two Registers & One Immediate.",
  },
  {
    name: "cmov_iz_imm",
    opcode: 147,
    description: "Conditional move if zero; otherwise keep register value.",
    latex:
      "\\omega'_A = \\begin{cases} \\nu_X & \\text{if } \\omega_B = 0 \\\\ \\omega_A & \\text{otherwise} \\end{cases}",
    linkInGrayPaperReader: "A.5.10. Instructions with Arguments of Two Registers & One Immediate.",
  },
  {
    name: "cmov_nz_imm",
    opcode: 148,
    description: "Conditional move if not zero; otherwise keep register value.",
    latex:
      "\\omega'_A = \\begin{cases} \\nu_X & \\text{if } \\omega_B \\neq 0 \\\\ \\omega_A & \\text{otherwise} \\end{cases}",
    linkInGrayPaperReader: "A.5.10. Instructions with Arguments of Two Registers & One Immediate.",
  },
  {
    name: "add_imm_64",
    opcode: 149,
    description: "Add an immediate value to a 64-bit register.",
    latex: "\\omega'_A = (\\omega_B + \\nu_X) \\mod 2^{64}",
    linkInGrayPaperReader: "A.5.10. Instructions with Arguments of Two Registers & One Immediate.",
  },
  {
    name: "mul_imm_64",
    opcode: 150,
    description: "Multiply an immediate value with a 64-bit register.",
    latex: "\\omega'_A = (\\omega_B \\times \\nu_X) \\mod 2^{64}",
    linkInGrayPaperReader: "A.5.10. Instructions with Arguments of Two Registers & One Immediate.",
  },
  {
    name: "shlo_imm_64",
    opcode: 141,
    description: "Shift left logical by immediate value (64-bit).",
    latex: "\\omega'_A = \\mathcal{X}_8((\\omega_B \\cdot 2^{\\nu_X} \\mod 2^{64}))",
    linkInGrayPaperReader: "A.5.10. Instructions with Arguments of Two Registers & One Immediate.",
  },
  {
    name: "shro_r_imm_64",
    opcode: 142,
    description: "Logical shift right by immediate value (64-bit).",
    latex: "\\omega'_A = \\mathcal{X}_8(\\lfloor \\omega_B \\div 2^{\\nu_X} \\rfloor)",
    linkInGrayPaperReader: "A.5.10. Instructions with Arguments of Two Registers & One Immediate.",
  },
  {
    name: "shar_r_imm_64",
    opcode: 143,
    description: "Arithmetic shift right by immediate value (64-bit).",
    latex: "\\omega'_A = Z_8(\\lfloor Z_8(\\omega_B) \\div 2^{\\nu_X} \\rfloor)",
    linkInGrayPaperReader: "A.5.10. Instructions with Arguments of Two Registers & One Immediate.",
  },
  {
    name: "neg_add_imm_64",
    opcode: 144,
    description: "Add the negated immediate value to a 64-bit register.",
    latex: "\\omega'_A = (\\nu_X + 2^{64} - \\omega_B) \\mod 2^{64}",
    linkInGrayPaperReader: "A.5.10. Instructions with Arguments of Two Registers & One Immediate.",
  },
  {
    name: "shlo_1_imm_alt_64",
    opcode: 145,
    description: "Alternative shift left logical by immediate value (64-bit).",
    latex: "\\omega'_A = (\\nu_X \\cdot 2^{\\omega_B} \\mod 2^{64})",
    linkInGrayPaperReader: "A.5.10. Instructions with Arguments of Two Registers & One Immediate.",
  },
  {
    name: "shlo_r_imm_alt_64",
    opcode: 146,
    description: "Alternative shift right logical by immediate value (64-bit).",
    latex: "\\omega'_A = \\lfloor \\nu_X \\div 2^{\\omega_B} \\rfloor",
    linkInGrayPaperReader: "A.5.10. Instructions with Arguments of Two Registers & One Immediate.",
  },
  {
    name: "shar_r_imm_alt_64",
    opcode: 147,
    description: "Alternative arithmetic shift right by immediate value (64-bit).",
    latex: "\\omega'_A = Z_8(\\lfloor Z_8(\\nu_X) \\div 2^{\\omega_B} \\rfloor)",
    linkInGrayPaperReader: "A.5.10. Instructions with Arguments of Two Registers & One Immediate.",
  },
  {
    name: "rot_r_64_imm",
    opcode: 158,
    description: "Rotate right a 64-bit register by an immediate value.",
    latex: "\\forall i \\in \\mathbb{N}_{64} : B_8(\\omega'_A)_i = B_8(\\omega_B)_{(i+\\nu_X) \\mod 64}",
    linkInGrayPaperReader: "A.5.10. Instructions with Arguments of Two Registers & One Immediate.",
  },
  {
    name: "rot_r_64_imm_alt",
    opcode: 159,
    description: "Alternative rotate right for a 64-bit register by an immediate value.",
    latex: "\\forall i \\in \\mathbb{N}_{64} : B_8(\\omega'_A)_i = B_8(\\nu_X)_{(i+\\omega_B) \\mod 64}",
    linkInGrayPaperReader: "A.5.10. Instructions with Arguments of Two Registers & One Immediate.",
  },
  {
    name: "rot_r_32_imm",
    opcode: 160,
    description: "Rotate right a 32-bit register by an immediate value.",
    latex:
      "\\omega'_A = \\mathcal{X}_4(x) \\text{ where } x \\in \\mathbb{N}_{32}, \\forall i \\in \\mathbb{N}_{32} : B_4(x)_i = B_4(\\omega_B)_{(i+\\nu_X) \\mod 32}",
    linkInGrayPaperReader: "A.5.10. Instructions with Arguments of Two Registers & One Immediate.",
  },
  {
    name: "rot_r_32_imm_alt",
    opcode: 161,
    description: "Alternative rotate right for a 32-bit register by an immediate value.",
    latex:
      "\\omega'_A = \\mathcal{X}_4(x) \\text{ where } x \\in \\mathbb{N}_{32}, \\forall i \\in \\mathbb{N}_{32} : B_4(x)_i = B_4(\\nu_X)_{(i+\\omega_B) \\mod 32}",
    linkInGrayPaperReader: "A.5.10. Instructions with Arguments of Two Registers & One Immediate.",
  },

  {
    name: "branch_eq",
    opcode: 170,
    description: "Branch if two register values are equal.",
    latex: "\\text{branch}(\\nu_X, \\omega_A = \\omega_B)",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/28dc0328dc03",
  },
  {
    name: "branch_ne",
    opcode: 171,
    description: "Branch if two register values are not equal.",
    latex: "\\text{branch}(\\nu_X, \\omega_A \\neq \\omega_B)",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/28dc0328dc03",
  },
  {
    name: "branch_lt_u",
    opcode: 172,
    description: "Branch if the first register is less than the second (unsigned).",
    latex: "\\text{branch}(\\nu_X, \\omega_A < \\omega_B)",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/28dc0328dc03",
  },
  {
    name: "branch_lt_s",
    opcode: 173,
    description: "Branch if the first register is less than the second (signed).",
    latex: "\\text{branch}(\\nu_X, Z_8(\\omega_A) < Z_8(\\omega_B))",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/28dc0328dc03",
  },
  {
    name: "branch_ge_u",
    opcode: 174,
    description: "Branch if the first register is greater than or equal to the second (unsigned).",
    latex: "\\text{branch}(\\nu_X, \\omega_A \\geq \\omega_B)",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/28dc0328dc03",
  },
  {
    name: "branch_ge_s",
    opcode: 175,
    description: "Branch if the first register is greater than or equal to the second (signed).",
    latex: "\\text{branch}(\\nu_X, Z_8(\\omega_A) \\geq Z_8(\\omega_B))",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/28dc0328dc03",
  },

  {
    name: "load_imm_jump_ind",
    opcode: 180,
    description: "Load an immediate jump address indirectly and branch.",
    latex: "\\text{djump}((\\omega_B + \\nu_Y) \\mod 2^{32}), \\omega'_A = \\nu_X",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/29ac0029ac00",
  },

  {
    name: "add_32",
    opcode: 190,
    description: "Add two register values (32-bit).",
    latex: "\\omega'_D = \\mathcal{X}_4((\\omega_A + \\omega_B) \\mod 2^{32})",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/298901298901",
  },
  {
    name: "sub_32",
    opcode: 191,
    description: "Subtract two 32-bit register values.",
    latex: "\\omega'_D = \\mathcal{X}_4((\\omega_A + 2^{32} - (\\omega_B \\mod 2^{32})) \\mod 2^{32})",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/298901298901",
  },
  {
    name: "mul_32",
    opcode: 192,
    description: "Multiply two 32-bit register values.",
    latex: "\\omega'_D = \\mathcal{X}_4((\\omega_A \\cdot \\omega_B) \\mod 2^{32})",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/298901298901",
  },
  {
    name: "div_u_32",
    opcode: 193,
    description: "Unsigned division of two 32-bit values.",
    latex:
      "\\omega'_D = \\begin{cases} 2^{64} - 1 & \\text{if } \\omega_B \\mod 2^{32} = 0 \\\\ (\\omega_A \\mod 2^{32}) \\div (\\omega_B \\mod 2^{32}) & \\text{otherwise} \\end{cases}",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/298901298901",
  },
  {
    name: "div_s_32",
    opcode: 194,
    description: "Signed division of two 32-bit values.",
    latex:
      "\\omega'_D = \\begin{cases} 2^{64} - 1 & \\text{if } b = 0 \\\\ a & \\text{if } a = -2^{31} \\land b = -1 \\\\ Z_8^{-1}(|a \\div b|) & \\text{otherwise} \\end{cases} \\text{, where } a = Z_4(\\omega_A \\mod 2^{32}), b = Z_4(\\omega_B \\mod 2^{32})",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/298901298901",
  },
  {
    name: "rem_u_32",
    opcode: 195,
    description: "Unsigned remainder of two 32-bit values.",
    latex:
      "\\omega'_D = \\begin{cases} \\mathcal{X}_4(\\omega_A) & \\text{if } \\omega_B \\mod 2^{32} = 0 \\\\ \\mathcal{X}_4((\\omega_A \\mod 2^{32}) \\mod (\\omega_B \\mod 2^{32})) & \\text{otherwise} \\end{cases}",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/298901298901",
  },
  {
    name: "rem_s_32",
    opcode: 196,
    description: "Signed remainder of two 32-bit values.",
    latex:
      "\\omega'_D = \\begin{cases} Z_8^{-1}(a) & \\text{if } b = 0 \\\\ 0 & \\text{if } a = -2^{31} \\land b = -1 \\\\ Z_8^{-1}(a \\mod b) & \\text{otherwise} \\end{cases}, \\text{ where } a = Z_4(\\omega_A \\mod 2^{32}), b = Z_4(\\omega_B \\mod 2^{32})",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/298901298901",
  },
  {
    name: "shlo_1_32",
    opcode: 197,
    description: "Shift left logical by one position (32-bit).",
    latex: "\\omega'_D = \\mathcal{X}_4((\\omega_A \\cdot 2^{\\nu_X} \\mod 32) \\mod 2^{32})",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/298901298901",
  },
  {
    name: "shlo_r_32",
    opcode: 198,
    description: "Shift right logical by one position (32-bit).",
    latex: "\\omega'_D = \\mathcal{X}_4(((\\omega_A \\mod 2^{32}) \\div 2^{\\nu_X}) + 2^{\\nu_X} \\mod 32)",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/298901298901",
  },
  {
    name: "shar_r_32",
    opcode: 199,
    description: "Arithmetic shift right by one position (32-bit).",
    latex: "\\omega'_D = Z_8^{-1}(\\lfloor Z_4(\\omega_A \\mod 2^{32}) \\div 2^{\\nu_X} \\rfloor)",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/298901298901",
  },
  {
    name: "add_64",
    opcode: 200,
    description: "Add two 64-bit register values.",
    latex: "\\omega'_D = (\\omega_A + \\omega_B) \\mod 2^{64}",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/298901298901",
  },
  {
    name: "sub_64",
    opcode: 201,
    description: "Subtract two 64-bit register values.",
    latex: "\\omega'_D = (\\omega_A + 2^{64} - \\omega_B) \\mod 2^{64}",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/298901298901",
  },
  {
    name: "mul_64",
    opcode: 202,
    description: "Multiply two 64-bit register values.",
    latex: "\\omega'_D = (\\omega_A \\cdot \\omega_B) \\mod 2^{64}",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/298901298901",
  },
  {
    name: "div_u_64",
    opcode: 203,
    description: "Unsigned division of two 64-bit values.",
    latex:
      "\\omega'_D = \\begin{cases} 2^{64} - 1 & \\text{if } \\omega_B = 0 \\\\ \\lfloor \\omega_A \\div \\omega_B \\rfloor & \\text{otherwise} \\end{cases}",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/298901298901",
  },
  {
    name: "div_s_64",
    opcode: 204,
    description: "Signed division of two 64-bit values.",
    latex:
      "\\omega'_D = \\begin{cases} 2^{64} - 1 & \\text{if } \\omega_B = 0 \\\\ \\omega_A & \\text{if } Z_8(\\omega_A) = -2^{63} \\land Z_8(\\omega_B) = -1 \\\\ Z_8^{-1}(\\lfloor Z_8(\\omega_A) \\div Z_8(\\omega_B) \\rfloor) & \\text{otherwise} \\end{cases}",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/298901298901",
  },
  {
    name: "rem_u_64",
    opcode: 205,
    description: "Unsigned remainder of two 64-bit values.",
    latex:
      "\\omega'_D = \\begin{cases} \\omega_A & \\text{if } \\omega_B = 0 \\\\ \\omega_A \\mod \\omega_B & \\text{otherwise} \\end{cases}",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/298901298901",
  },
  {
    name: "rem_s_64",
    opcode: 206,
    description: "Signed remainder of two 64-bit values.",
    latex:
      "\\omega'_D = \\begin{cases} \\omega_A & \\text{if } \\omega_B = 0 \\\\ 0 & \\text{if } Z_8(\\omega_A) = -2^{63} \\land Z_8(\\omega_B) = -1 \\\\ Z_8^{-1}(Z_8(\\omega_A) \\mod Z_8(\\omega_B)) & \\text{otherwise} \\end{cases}",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/298901298901",
  },
  {
    name: "shlo_1_64",
    opcode: 207,
    description: "Shift left logical by one position (64-bit).",
    latex: "\\omega'_D = (\\omega_A \\cdot 2^{\\nu_X \\mod 64}) \\mod 2^{64}",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/298901298901",
  },
  {
    name: "shlo_r_64",
    opcode: 208,
    description: "Shift right logical by immediate value (64-bit).",
    latex: "\\omega'_D = \\lfloor \\omega_A \\div 2^{\\omega_B \\mod 64} \\rfloor",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/298901298901",
  },
  {
    name: "shar_r_64",
    opcode: 209,
    description: "Arithmetic shift right by immediate value (64-bit).",
    latex: "\\omega'_D = Z_8^{-1}(\\lfloor Z_8(\\omega_A) \\div 2^{\\omega_B \\mod 64} \\rfloor)",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/298901298901",
  },
  {
    name: "and",
    opcode: 210,
    description: "Bitwise AND between two registers.",
    latex: "\\forall i \\in \\mathbb{N}_4 : B_8(\\omega'_D) = B_8(\\omega_A) \\land B_8(\\omega_B)",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/298901298901",
  },
  {
    name: "xor",
    opcode: 211,
    description: "Bitwise XOR operation between two registers.",
    latex: "\\forall i \\in \\mathbb{N}_{64} : B_8(\\omega'_D)_i = B_8(\\omega_A)_i \\oplus B_8(\\omega_B)_i",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/298901298901",
  },
  {
    name: "or",
    opcode: 212,
    description: "Bitwise OR operation between two registers.",
    latex: "\\forall i \\in \\mathbb{N}_{64} : B_8(\\omega'_D)_i = B_8(\\omega_A)_i \\lor B_8(\\omega_B)_i",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/298901298901",
  },
  {
    name: "mul_upper_s_s",
    opcode: 213,
    description: "Signed multiplication of two registers, upper half result.",
    latex: "\\omega'_D = Z_8^{-1}(\\lfloor (Z_8(\\omega_A) \\cdot Z_8(\\omega_B)) \\div 2^{64} \\rfloor)",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/298901298901",
  },
  {
    name: "mul_upper_u_u",
    opcode: 214,
    description: "Unsigned multiplication of two registers, upper half result.",
    latex: "\\omega'_D = \\lfloor (\\omega_A \\cdot \\omega_B) \\div 2^{64} \\rfloor",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/298901298901",
  },
  {
    name: "mul_upper_s_u",
    opcode: 215,
    description: "Signed-unsigned multiplication of two registers, upper half result.",
    latex: "\\omega'_D = Z_8^{-1}(\\lfloor (Z_8(\\omega_A) \\cdot \\omega_B) \\div 2^{64} \\rfloor)",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/298901298901",
  },
  {
    name: "set_lt_u",
    opcode: 216,
    description: "Set if less than (unsigned comparison).",
    latex: "\\omega'_D = \\omega_A < \\omega_B",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/298901298901",
  },
  {
    name: "set_lt_s",
    opcode: 217,
    description: "Set if less than (signed comparison).",
    latex: "\\omega'_D = Z_8(\\omega_A) < Z_8(\\omega_B)",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/298901298901",
  },
  {
    name: "cmov_iz",
    opcode: 218,
    description: "Conditional move if zero.",
    latex:
      "\\omega'_D = \\begin{cases} \\omega_A & \\text{if } \\omega_B = 0 \\\\ \\omega_D & \\text{otherwise} \\end{cases}",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/298901298901",
  },
  {
    name: "cmov_nz",
    opcode: 219,
    description: "Conditional move if not zero.",
    latex:
      "\\omega'_D = \\begin{cases} \\omega_A & \\text{if } \\omega_B \\neq 0 \\\\ \\omega_D & \\text{otherwise} \\end{cases}",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/298901298901",
  },
  {
    name: "rot_l_64",
    opcode: 220,
    description: "Rotate left a 64-bit register by an immediate value.",
    latex: "\\forall i \\in \\mathbb{N}_{64} : B_8(\\omega'_D)_i = B_8(\\omega_A)_{(i+\\omega_B) \\mod 64}",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/298901298901",
  },
  {
    name: "rot_l_32",
    opcode: 221,
    description: "Rotate left a 32-bit register by an immediate value.",
    latex:
      "\\omega'_D = \\mathcal{X}_4(x) \\text{ where } x \\in \\mathbb{N}_{32}, \\forall i \\in \\mathbb{N}_{32} : B_4(x)_i = B_4(\\omega_A)_{(i+\\omega_A) \\mod 32}",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/298901298901",
  },
  {
    name: "rot_r_64",
    opcode: 222,
    description: "Rotate right a 64-bit register by an immediate value.",
    latex: "\\forall i \\in \\mathbb{N}_{64} : B_8(\\omega'_D)_i = B_8(\\omega_A)_{(i+\\omega_B) \\mod 64}",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/298901298901",
  },
  {
    name: "rot_r_32",
    opcode: 223,
    description: "Rotate right a 32-bit register by an immediate value.",
    latex:
      "\\omega'_D = \\mathcal{X}_4(x) \\text{ where } x \\in \\mathbb{N}_{32}, \\forall i \\in \\mathbb{N}_{32} : B_4(x)_i = B_4(\\omega_A)_{(i+\\omega_A) \\mod 32}",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/298901298901",
  },
  {
    name: "and_inv",
    opcode: 224,
    description: "Perform bitwise AND with inverted second operand.",
    latex: "\\forall i \\in \\mathbb{N}_{64} : B_8(\\omega'_D)_i = B_8(\\omega_A)_i \\land \\neg B_8(\\omega_B)_i",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/298901298901",
  },
  {
    name: "or_inv",
    opcode: 225,
    description: "Perform bitwise OR with inverted second operand.",
    latex: "\\forall i \\in \\mathbb{N}_{64} : B_8(\\omega'_D)_i = B_8(\\omega_A)_i \\lor \\neg B_8(\\omega_B)_i",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/298901298901",
  },
  {
    name: "xnor",
    opcode: 226,
    description: "Perform bitwise XNOR between two operands.",
    latex: "\\forall i \\in \\mathbb{N}_{64} : B_8(\\omega'_D)_i = \\neg(B_8(\\omega_A)_i \\oplus B_8(\\omega_B)_i)",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/298901298901",
  },
  {
    name: "max",
    opcode: 227,
    description: "Compute the maximum value (signed comparison).",
    latex: "\\omega'_D = \\max(Z_8(\\omega_A), Z_8(\\omega_B))",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/298901298901",
  },
  {
    name: "max_u",
    opcode: 228,
    description: "Compute the maximum value (unsigned comparison).",
    latex: "\\omega'_D = \\max(\\omega_A, \\omega_B)",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/298901298901",
  },
  {
    name: "min",
    opcode: 229,
    description: "Compute the minimum value (signed comparison).",
    latex: "\\omega'_D = \\min(Z_8(\\omega_A), Z_8(\\omega_B))",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/298901298901",
  },
  {
    name: "min_u",
    opcode: 230,
    description: "Compute the minimum value (unsigned comparison).",
    latex: "\\omega'_D = \\min(\\omega_A, \\omega_B)",
    linkInGrayPaperReader: "https://graypaper.fluffylabs.dev/#/579bd12/298901298901",
  },
];
